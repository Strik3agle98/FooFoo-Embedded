
PM2.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab4  08002ab4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002abc  08002abc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08002b34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002b34  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d9c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001250  00000000  00000000  00025e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000600  00000000  00000000  00027090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  00027690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f2b6  00000000  00000000  00027be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000054d9  00000000  00000000  00046e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1510  00000000  00000000  0004c377  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a58  00000000  00000000  0010d904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a44 	.word	0x08002a44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002a44 	.word	0x08002a44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f90d 	bl	80007c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f001 fcae 	bl	8001f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f917 	bl	8000816 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f8ed 	bl	80007de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000a0 	.word	0x200000a0

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000a0 	.word	0x200000a0

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	; (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	; 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	; 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000794:	d301      	bcc.n	800079a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2301      	movs	r3, #1
 8000798:	e00f      	b.n	80007ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <SysTick_Config+0x40>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a2:	210f      	movs	r1, #15
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f7ff ff8e 	bl	80006c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SysTick_Config+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <SysTick_Config+0x40>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff47 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f0:	f7ff ff5c 	bl	80006ac <__NVIC_GetPriorityGrouping>
 80007f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	68b9      	ldr	r1, [r7, #8]
 80007fa:	6978      	ldr	r0, [r7, #20]
 80007fc:	f7ff ff8e 	bl	800071c <NVIC_EncodePriority>
 8000800:	4602      	mov	r2, r0
 8000802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff5d 	bl	80006c8 <__NVIC_SetPriority>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffb0 	bl	8000784 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	b480      	push	{r7}
 8000832:	b089      	sub	sp, #36	; 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	e16b      	b.n	8000b24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800084c:	2201      	movs	r2, #1
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	429a      	cmp	r2, r3
 8000866:	f040 815a 	bne.w	8000b1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d003      	beq.n	800087a <HAL_GPIO_Init+0x4a>
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b12      	cmp	r3, #18
 8000878:	d123      	bne.n	80008c2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	08da      	lsrs	r2, r3, #3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3208      	adds	r2, #8
 8000882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	220f      	movs	r2, #15
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4013      	ands	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	691a      	ldr	r2, [r3, #16]
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	08da      	lsrs	r2, r3, #3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3208      	adds	r2, #8
 80008bc:	69b9      	ldr	r1, [r7, #24]
 80008be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2203      	movs	r2, #3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4013      	ands	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 0203 	and.w	r2, r3, #3
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d00b      	beq.n	8000916 <HAL_GPIO_Init+0xe6>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d007      	beq.n	8000916 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090a:	2b11      	cmp	r3, #17
 800090c:	d003      	beq.n	8000916 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b12      	cmp	r3, #18
 8000914:	d130      	bne.n	8000978 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4013      	ands	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4313      	orrs	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800094c:	2201      	movs	r2, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	091b      	lsrs	r3, r3, #4
 8000962:	f003 0201 	and.w	r2, r3, #1
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80b4 	beq.w	8000b1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b5f      	ldr	r3, [pc, #380]	; (8000b38 <HAL_GPIO_Init+0x308>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a5e      	ldr	r2, [pc, #376]	; (8000b38 <HAL_GPIO_Init+0x308>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b5c      	ldr	r3, [pc, #368]	; (8000b38 <HAL_GPIO_Init+0x308>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009d2:	4a5a      	ldr	r2, [pc, #360]	; (8000b3c <HAL_GPIO_Init+0x30c>)
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	089b      	lsrs	r3, r3, #2
 80009d8:	3302      	adds	r3, #2
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0303 	and.w	r3, r3, #3
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a51      	ldr	r2, [pc, #324]	; (8000b40 <HAL_GPIO_Init+0x310>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d02b      	beq.n	8000a56 <HAL_GPIO_Init+0x226>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a50      	ldr	r2, [pc, #320]	; (8000b44 <HAL_GPIO_Init+0x314>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d025      	beq.n	8000a52 <HAL_GPIO_Init+0x222>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4f      	ldr	r2, [pc, #316]	; (8000b48 <HAL_GPIO_Init+0x318>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d01f      	beq.n	8000a4e <HAL_GPIO_Init+0x21e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <HAL_GPIO_Init+0x31c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d019      	beq.n	8000a4a <HAL_GPIO_Init+0x21a>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4d      	ldr	r2, [pc, #308]	; (8000b50 <HAL_GPIO_Init+0x320>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d013      	beq.n	8000a46 <HAL_GPIO_Init+0x216>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4c      	ldr	r2, [pc, #304]	; (8000b54 <HAL_GPIO_Init+0x324>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d00d      	beq.n	8000a42 <HAL_GPIO_Init+0x212>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4b      	ldr	r2, [pc, #300]	; (8000b58 <HAL_GPIO_Init+0x328>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_Init+0x20e>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4a      	ldr	r2, [pc, #296]	; (8000b5c <HAL_GPIO_Init+0x32c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_Init+0x20a>
 8000a36:	2307      	movs	r3, #7
 8000a38:	e00e      	b.n	8000a58 <HAL_GPIO_Init+0x228>
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	e00c      	b.n	8000a58 <HAL_GPIO_Init+0x228>
 8000a3e:	2306      	movs	r3, #6
 8000a40:	e00a      	b.n	8000a58 <HAL_GPIO_Init+0x228>
 8000a42:	2305      	movs	r3, #5
 8000a44:	e008      	b.n	8000a58 <HAL_GPIO_Init+0x228>
 8000a46:	2304      	movs	r3, #4
 8000a48:	e006      	b.n	8000a58 <HAL_GPIO_Init+0x228>
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e004      	b.n	8000a58 <HAL_GPIO_Init+0x228>
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e002      	b.n	8000a58 <HAL_GPIO_Init+0x228>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_Init+0x228>
 8000a56:	2300      	movs	r3, #0
 8000a58:	69fa      	ldr	r2, [r7, #28]
 8000a5a:	f002 0203 	and.w	r2, r2, #3
 8000a5e:	0092      	lsls	r2, r2, #2
 8000a60:	4093      	lsls	r3, r2
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a68:	4934      	ldr	r1, [pc, #208]	; (8000b3c <HAL_GPIO_Init+0x30c>)
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	3302      	adds	r3, #2
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a76:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <HAL_GPIO_Init+0x330>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4013      	ands	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a9a:	4a31      	ldr	r2, [pc, #196]	; (8000b60 <HAL_GPIO_Init+0x330>)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <HAL_GPIO_Init+0x330>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ac4:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <HAL_GPIO_Init+0x330>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <HAL_GPIO_Init+0x330>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_GPIO_Init+0x330>)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_GPIO_Init+0x330>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4013      	ands	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b18:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <HAL_GPIO_Init+0x330>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	f67f ae90 	bls.w	800084c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3724      	adds	r7, #36	; 0x24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40021400 	.word	0x40021400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40021c00 	.word	0x40021c00
 8000b60:	40013c00 	.word	0x40013c00

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	041a      	lsls	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	619a      	str	r2, [r3, #24]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	401a      	ands	r2, r3
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d104      	bne.n	8000bba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	041a      	lsls	r2, r3, #16
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bb8:	e002      	b.n	8000bc0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	619a      	str	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e22d      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d075      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bea:	4ba3      	ldr	r3, [pc, #652]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 030c 	and.w	r3, r3, #12
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d00c      	beq.n	8000c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bf6:	4ba0      	ldr	r3, [pc, #640]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d112      	bne.n	8000c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c02:	4b9d      	ldr	r3, [pc, #628]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c0e:	d10b      	bne.n	8000c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c10:	4b99      	ldr	r3, [pc, #612]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d05b      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x108>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d157      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e208      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c30:	d106      	bne.n	8000c40 <HAL_RCC_OscConfig+0x74>
 8000c32:	4b91      	ldr	r3, [pc, #580]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a90      	ldr	r2, [pc, #576]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e01d      	b.n	8000c7c <HAL_RCC_OscConfig+0xb0>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c48:	d10c      	bne.n	8000c64 <HAL_RCC_OscConfig+0x98>
 8000c4a:	4b8b      	ldr	r3, [pc, #556]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a8a      	ldr	r2, [pc, #552]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	4b88      	ldr	r3, [pc, #544]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a87      	ldr	r2, [pc, #540]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e00b      	b.n	8000c7c <HAL_RCC_OscConfig+0xb0>
 8000c64:	4b84      	ldr	r3, [pc, #528]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a83      	ldr	r2, [pc, #524]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b81      	ldr	r3, [pc, #516]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a80      	ldr	r2, [pc, #512]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d013      	beq.n	8000cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c84:	f7ff fce2 	bl	800064c <HAL_GetTick>
 8000c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c8c:	f7ff fcde 	bl	800064c <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b64      	cmp	r3, #100	; 0x64
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e1cd      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	4b76      	ldr	r3, [pc, #472]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f0      	beq.n	8000c8c <HAL_RCC_OscConfig+0xc0>
 8000caa:	e014      	b.n	8000cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cac:	f7ff fcce 	bl	800064c <HAL_GetTick>
 8000cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	e008      	b.n	8000cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb4:	f7ff fcca 	bl	800064c <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b64      	cmp	r3, #100	; 0x64
 8000cc0:	d901      	bls.n	8000cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e1b9      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc6:	4b6c      	ldr	r3, [pc, #432]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f0      	bne.n	8000cb4 <HAL_RCC_OscConfig+0xe8>
 8000cd2:	e000      	b.n	8000cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d063      	beq.n	8000daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce2:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00b      	beq.n	8000d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cee:	4b62      	ldr	r3, [pc, #392]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d11c      	bne.n	8000d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cfa:	4b5f      	ldr	r3, [pc, #380]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d116      	bne.n	8000d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d06:	4b5c      	ldr	r3, [pc, #368]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d005      	beq.n	8000d1e <HAL_RCC_OscConfig+0x152>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d001      	beq.n	8000d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e18d      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1e:	4b56      	ldr	r3, [pc, #344]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	4952      	ldr	r1, [pc, #328]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d32:	e03a      	b.n	8000daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d020      	beq.n	8000d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d3c:	4b4f      	ldr	r3, [pc, #316]	; (8000e7c <HAL_RCC_OscConfig+0x2b0>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d42:	f7ff fc83 	bl	800064c <HAL_GetTick>
 8000d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4a:	f7ff fc7f 	bl	800064c <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e16e      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5c:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f0      	beq.n	8000d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d68:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4940      	ldr	r1, [pc, #256]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
 8000d7c:	e015      	b.n	8000daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <HAL_RCC_OscConfig+0x2b0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d84:	f7ff fc62 	bl	800064c <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fc5e 	bl	800064c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e14d      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f0      	bne.n	8000d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d030      	beq.n	8000e18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d016      	beq.n	8000dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <HAL_RCC_OscConfig+0x2b4>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fc42 	bl	800064c <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fc3e 	bl	800064c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e12d      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0x200>
 8000dea:	e015      	b.n	8000e18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_RCC_OscConfig+0x2b4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df2:	f7ff fc2b 	bl	800064c <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fc27 	bl	800064c <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e116      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f0      	bne.n	8000dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80a0 	beq.w	8000f66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10f      	bne.n	8000e56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_RCC_OscConfig+0x2ac>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e52:	2301      	movs	r3, #1
 8000e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_RCC_OscConfig+0x2b8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d121      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_RCC_OscConfig+0x2b8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_RCC_OscConfig+0x2b8>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fbed 	bl	800064c <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	e011      	b.n	8000e9a <HAL_RCC_OscConfig+0x2ce>
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	42470000 	.word	0x42470000
 8000e80:	42470e80 	.word	0x42470e80
 8000e84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e88:	f7ff fbe0 	bl	800064c <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e0cf      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9a:	4b6a      	ldr	r3, [pc, #424]	; (8001044 <HAL_RCC_OscConfig+0x478>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f0      	beq.n	8000e88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d106      	bne.n	8000ebc <HAL_RCC_OscConfig+0x2f0>
 8000eae:	4b66      	ldr	r3, [pc, #408]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb2:	4a65      	ldr	r2, [pc, #404]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eba:	e01c      	b.n	8000ef6 <HAL_RCC_OscConfig+0x32a>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d10c      	bne.n	8000ede <HAL_RCC_OscConfig+0x312>
 8000ec4:	4b60      	ldr	r3, [pc, #384]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec8:	4a5f      	ldr	r2, [pc, #380]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed0:	4b5d      	ldr	r3, [pc, #372]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed4:	4a5c      	ldr	r2, [pc, #368]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6713      	str	r3, [r2, #112]	; 0x70
 8000edc:	e00b      	b.n	8000ef6 <HAL_RCC_OscConfig+0x32a>
 8000ede:	4b5a      	ldr	r3, [pc, #360]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee2:	4a59      	ldr	r2, [pc, #356]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eea:	4b57      	ldr	r3, [pc, #348]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eee:	4a56      	ldr	r2, [pc, #344]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d015      	beq.n	8000f2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000efe:	f7ff fba5 	bl	800064c <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f06:	f7ff fba1 	bl	800064c <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e08e      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f1c:	4b4a      	ldr	r3, [pc, #296]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0ee      	beq.n	8000f06 <HAL_RCC_OscConfig+0x33a>
 8000f28:	e014      	b.n	8000f54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fb8f 	bl	800064c <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f30:	e00a      	b.n	8000f48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff fb8b 	bl	800064c <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e078      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f48:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1ee      	bne.n	8000f32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d105      	bne.n	8000f66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a3a      	ldr	r2, [pc, #232]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d064      	beq.n	8001038 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f6e:	4b36      	ldr	r3, [pc, #216]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d05c      	beq.n	8001034 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d141      	bne.n	8001006 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <HAL_RCC_OscConfig+0x480>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fb60 	bl	800064c <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f90:	f7ff fb5c 	bl	800064c <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e04b      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f0      	bne.n	8000f90 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69da      	ldr	r2, [r3, #28]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	019b      	lsls	r3, r3, #6
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	085b      	lsrs	r3, r3, #1
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	041b      	lsls	r3, r3, #16
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	061b      	lsls	r3, r3, #24
 8000fd2:	491d      	ldr	r1, [pc, #116]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_RCC_OscConfig+0x480>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fb35 	bl	800064c <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fb31 	bl	800064c <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e020      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x41a>
 8001004:	e018      	b.n	8001038 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_RCC_OscConfig+0x480>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fb1e 	bl	800064c <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001014:	f7ff fb1a 	bl	800064c <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e009      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_RCC_OscConfig+0x47c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x448>
 8001032:	e001      	b.n	8001038 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40007000 	.word	0x40007000
 8001048:	40023800 	.word	0x40023800
 800104c:	42470060 	.word	0x42470060

08001050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e0ca      	b.n	80011fa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001064:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_ClockConfig+0x1b4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d90c      	bls.n	800108c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	4b64      	ldr	r3, [pc, #400]	; (8001204 <HAL_RCC_ClockConfig+0x1b4>)
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107a:	4b62      	ldr	r3, [pc, #392]	; (8001204 <HAL_RCC_ClockConfig+0x1b4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0b6      	b.n	80011fa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a4:	4b58      	ldr	r3, [pc, #352]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a57      	ldr	r2, [pc, #348]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80010aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010bc:	4b52      	ldr	r3, [pc, #328]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80010c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c8:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	494c      	ldr	r1, [pc, #304]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d044      	beq.n	8001170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	4b46      	ldr	r3, [pc, #280]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d119      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e07d      	b.n	80011fa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d003      	beq.n	800110e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110a:	2b03      	cmp	r3, #3
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e06d      	b.n	80011fa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e065      	b.n	80011fa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f023 0203 	bic.w	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4933      	ldr	r1, [pc, #204]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 800113c:	4313      	orrs	r3, r2
 800113e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001140:	f7ff fa84 	bl	800064c <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001146:	e00a      	b.n	800115e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001148:	f7ff fa80 	bl	800064c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	f241 3288 	movw	r2, #5000	; 0x1388
 8001156:	4293      	cmp	r3, r2
 8001158:	d901      	bls.n	800115e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e04d      	b.n	80011fa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 020c 	and.w	r2, r3, #12
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	429a      	cmp	r2, r3
 800116e:	d1eb      	bne.n	8001148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_RCC_ClockConfig+0x1b4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d20c      	bcs.n	8001198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_RCC_ClockConfig+0x1b4>)
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_RCC_ClockConfig+0x1b4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e030      	b.n	80011fa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4915      	ldr	r1, [pc, #84]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	490d      	ldr	r1, [pc, #52]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011d6:	f000 f81d 	bl	8001214 <HAL_RCC_GetSysClockFreq>
 80011da:	4601      	mov	r1, r0
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	fa21 f303 	lsr.w	r3, r1, r3
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff f9e6 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00
 8001208:	40023800 	.word	0x40023800
 800120c:	08002a68 	.word	0x08002a68
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800122a:	4b50      	ldr	r3, [pc, #320]	; (800136c <HAL_RCC_GetSysClockFreq+0x158>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b04      	cmp	r3, #4
 8001234:	d007      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x32>
 8001236:	2b08      	cmp	r3, #8
 8001238:	d008      	beq.n	800124c <HAL_RCC_GetSysClockFreq+0x38>
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 808d 	bne.w	800135a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001242:	60bb      	str	r3, [r7, #8]
       break;
 8001244:	e08c      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001246:	4b4b      	ldr	r3, [pc, #300]	; (8001374 <HAL_RCC_GetSysClockFreq+0x160>)
 8001248:	60bb      	str	r3, [r7, #8]
      break;
 800124a:	e089      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_RCC_GetSysClockFreq+0x158>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001254:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <HAL_RCC_GetSysClockFreq+0x158>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d023      	beq.n	80012aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001262:	4b42      	ldr	r3, [pc, #264]	; (800136c <HAL_RCC_GetSysClockFreq+0x158>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	099b      	lsrs	r3, r3, #6
 8001268:	f04f 0400 	mov.w	r4, #0
 800126c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	ea03 0501 	and.w	r5, r3, r1
 8001278:	ea04 0602 	and.w	r6, r4, r2
 800127c:	4a3d      	ldr	r2, [pc, #244]	; (8001374 <HAL_RCC_GetSysClockFreq+0x160>)
 800127e:	fb02 f106 	mul.w	r1, r2, r6
 8001282:	2200      	movs	r2, #0
 8001284:	fb02 f205 	mul.w	r2, r2, r5
 8001288:	440a      	add	r2, r1
 800128a:	493a      	ldr	r1, [pc, #232]	; (8001374 <HAL_RCC_GetSysClockFreq+0x160>)
 800128c:	fba5 0101 	umull	r0, r1, r5, r1
 8001290:	1853      	adds	r3, r2, r1
 8001292:	4619      	mov	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 0400 	mov.w	r4, #0
 800129a:	461a      	mov	r2, r3
 800129c:	4623      	mov	r3, r4
 800129e:	f7fe ffef 	bl	8000280 <__aeabi_uldivmod>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e049      	b.n	800133e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012aa:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_RCC_GetSysClockFreq+0x158>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	099b      	lsrs	r3, r3, #6
 80012b0:	f04f 0400 	mov.w	r4, #0
 80012b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	ea03 0501 	and.w	r5, r3, r1
 80012c0:	ea04 0602 	and.w	r6, r4, r2
 80012c4:	4629      	mov	r1, r5
 80012c6:	4632      	mov	r2, r6
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	f04f 0400 	mov.w	r4, #0
 80012d0:	0154      	lsls	r4, r2, #5
 80012d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012d6:	014b      	lsls	r3, r1, #5
 80012d8:	4619      	mov	r1, r3
 80012da:	4622      	mov	r2, r4
 80012dc:	1b49      	subs	r1, r1, r5
 80012de:	eb62 0206 	sbc.w	r2, r2, r6
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	f04f 0400 	mov.w	r4, #0
 80012ea:	0194      	lsls	r4, r2, #6
 80012ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012f0:	018b      	lsls	r3, r1, #6
 80012f2:	1a5b      	subs	r3, r3, r1
 80012f4:	eb64 0402 	sbc.w	r4, r4, r2
 80012f8:	f04f 0100 	mov.w	r1, #0
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	00e2      	lsls	r2, r4, #3
 8001302:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001306:	00d9      	lsls	r1, r3, #3
 8001308:	460b      	mov	r3, r1
 800130a:	4614      	mov	r4, r2
 800130c:	195b      	adds	r3, r3, r5
 800130e:	eb44 0406 	adc.w	r4, r4, r6
 8001312:	f04f 0100 	mov.w	r1, #0
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	02a2      	lsls	r2, r4, #10
 800131c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001320:	0299      	lsls	r1, r3, #10
 8001322:	460b      	mov	r3, r1
 8001324:	4614      	mov	r4, r2
 8001326:	4618      	mov	r0, r3
 8001328:	4621      	mov	r1, r4
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f04f 0400 	mov.w	r4, #0
 8001330:	461a      	mov	r2, r3
 8001332:	4623      	mov	r3, r4
 8001334:	f7fe ffa4 	bl	8000280 <__aeabi_uldivmod>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_GetSysClockFreq+0x158>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	0c1b      	lsrs	r3, r3, #16
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	3301      	adds	r3, #1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	60bb      	str	r3, [r7, #8]
      break;
 8001358:	e002      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_RCC_GetSysClockFreq+0x15c>)
 800135c:	60bb      	str	r3, [r7, #8]
      break;
 800135e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001360:	68bb      	ldr	r3, [r7, #8]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	00f42400 	.word	0x00f42400
 8001374:	017d7840 	.word	0x017d7840

08001378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_RCC_GetHCLKFreq+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008

08001390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001394:	f7ff fff0 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 8001398:	4601      	mov	r1, r0
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	0a9b      	lsrs	r3, r3, #10
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	08002a78 	.word	0x08002a78

080013b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013bc:	f7ff ffdc 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 80013c0:	4601      	mov	r1, r0
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	0b5b      	lsrs	r3, r3, #13
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	08002a78 	.word	0x08002a78

080013e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e03f      	b.n	8001472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fdac 	bl	8001f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2224      	movs	r2, #36	; 0x24
 8001410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f9b1 	bl	800178c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2220      	movs	r2, #32
 8001464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af02      	add	r7, sp, #8
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b20      	cmp	r3, #32
 8001498:	f040 8083 	bne.w	80015a2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <HAL_UART_Transmit+0x2e>
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e07b      	b.n	80015a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_UART_Transmit+0x40>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e074      	b.n	80015a4 <HAL_UART_Transmit+0x12a>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2221      	movs	r2, #33	; 0x21
 80014cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014d0:	f7ff f8bc 	bl	800064c <HAL_GetTick>
 80014d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	88fa      	ldrh	r2, [r7, #6]
 80014da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	88fa      	ldrh	r2, [r7, #6]
 80014e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80014e2:	e042      	b.n	800156a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014fa:	d122      	bne.n	8001542 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f8f6 	bl	80016f8 <UART_WaitOnFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e046      	b.n	80015a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001528:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3302      	adds	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	e017      	b.n	800156a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	e013      	b.n	800156a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2200      	movs	r2, #0
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f8d3 	bl	80016f8 <UART_WaitOnFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e023      	b.n	80015a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60ba      	str	r2, [r7, #8]
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800156e:	b29b      	uxth	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1b7      	bne.n	80014e4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2200      	movs	r2, #0
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f8ba 	bl	80016f8 <UART_WaitOnFlagUntilTimeout>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e00a      	b.n	80015a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2220      	movs	r2, #32
 8001592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80015a2:	2302      	movs	r3, #2
  }
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	f040 8090 	bne.w	80016ee <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <HAL_UART_Receive+0x2e>
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e088      	b.n	80016f0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_UART_Receive+0x40>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e081      	b.n	80016f0 <HAL_UART_Receive+0x144>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2222      	movs	r2, #34	; 0x22
 80015fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001602:	f7ff f823 	bl	800064c <HAL_GetTick>
 8001606:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	88fa      	ldrh	r2, [r7, #6]
 800160c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	88fa      	ldrh	r2, [r7, #6]
 8001612:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001614:	e05c      	b.n	80016d0 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800162c:	d12b      	bne.n	8001686 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2200      	movs	r2, #0
 8001636:	2120      	movs	r1, #32
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f85d 	bl	80016f8 <UART_WaitOnFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e053      	b.n	80016f0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10c      	bne.n	800166e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	b29b      	uxth	r3, r3
 800165c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001660:	b29a      	uxth	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3302      	adds	r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	e030      	b.n	80016d0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	b29b      	uxth	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	b29a      	uxth	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3301      	adds	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	e024      	b.n	80016d0 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2200      	movs	r2, #0
 800168e:	2120      	movs	r1, #32
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f831 	bl	80016f8 <UART_WaitOnFlagUntilTimeout>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e027      	b.n	80016f0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d108      	bne.n	80016ba <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6859      	ldr	r1, [r3, #4]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	60ba      	str	r2, [r7, #8]
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e00a      	b.n	80016d0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1c59      	adds	r1, r3, #1
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d19d      	bne.n	8001616 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80016ee:	2302      	movs	r3, #2
  }
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001708:	e02c      	b.n	8001764 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d028      	beq.n	8001764 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <UART_WaitOnFlagUntilTimeout+0x30>
 8001718:	f7fe ff98 	bl	800064c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	429a      	cmp	r2, r3
 8001726:	d21d      	bcs.n	8001764 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001736:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2220      	movs	r2, #32
 800174c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2220      	movs	r2, #32
 8001754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e00f      	b.n	8001784 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	4013      	ands	r3, r2
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	429a      	cmp	r2, r3
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	429a      	cmp	r2, r3
 8001780:	d0c3      	beq.n	800170a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80017cc:	f023 030c 	bic.w	r3, r3, #12
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	68f9      	ldr	r1, [r7, #12]
 80017d6:	430b      	orrs	r3, r1
 80017d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699a      	ldr	r2, [r3, #24]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017f8:	f040 80e4 	bne.w	80019c4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4aab      	ldr	r2, [pc, #684]	; (8001ab0 <UART_SetConfig+0x324>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d004      	beq.n	8001810 <UART_SetConfig+0x84>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4aaa      	ldr	r2, [pc, #680]	; (8001ab4 <UART_SetConfig+0x328>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d16c      	bne.n	80018ea <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001810:	f7ff fdd2 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001814:	4602      	mov	r2, r0
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009a      	lsls	r2, r3, #2
 800181e:	441a      	add	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4aa3      	ldr	r2, [pc, #652]	; (8001ab8 <UART_SetConfig+0x32c>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	011c      	lsls	r4, r3, #4
 8001834:	f7ff fdc0 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001838:	4602      	mov	r2, r0
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009a      	lsls	r2, r3, #2
 8001842:	441a      	add	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fbb2 f5f3 	udiv	r5, r2, r3
 800184e:	f7ff fdb3 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001852:	4602      	mov	r2, r0
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	009a      	lsls	r2, r3, #2
 800185c:	441a      	add	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fbb2 f3f3 	udiv	r3, r2, r3
 8001868:	4a93      	ldr	r2, [pc, #588]	; (8001ab8 <UART_SetConfig+0x32c>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2264      	movs	r2, #100	; 0x64
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	1aeb      	subs	r3, r5, r3
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	3332      	adds	r3, #50	; 0x32
 800187c:	4a8e      	ldr	r2, [pc, #568]	; (8001ab8 <UART_SetConfig+0x32c>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800188a:	441c      	add	r4, r3
 800188c:	f7ff fd94 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001890:	4602      	mov	r2, r0
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	441a      	add	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80018a6:	f7ff fd87 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009a      	lsls	r2, r3, #2
 80018b4:	441a      	add	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	4a7d      	ldr	r2, [pc, #500]	; (8001ab8 <UART_SetConfig+0x32c>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2264      	movs	r2, #100	; 0x64
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	1aeb      	subs	r3, r5, r3
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	3332      	adds	r3, #50	; 0x32
 80018d4:	4a78      	ldr	r2, [pc, #480]	; (8001ab8 <UART_SetConfig+0x32c>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	f003 0207 	and.w	r2, r3, #7
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4422      	add	r2, r4
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	e154      	b.n	8001b94 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018ea:	f7ff fd51 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	009a      	lsls	r2, r3, #2
 80018f8:	441a      	add	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	4a6c      	ldr	r2, [pc, #432]	; (8001ab8 <UART_SetConfig+0x32c>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	011c      	lsls	r4, r3, #4
 800190e:	f7ff fd3f 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001912:	4602      	mov	r2, r0
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	009a      	lsls	r2, r3, #2
 800191c:	441a      	add	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fbb2 f5f3 	udiv	r5, r2, r3
 8001928:	f7ff fd32 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 800192c:	4602      	mov	r2, r0
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	009a      	lsls	r2, r3, #2
 8001936:	441a      	add	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4a5d      	ldr	r2, [pc, #372]	; (8001ab8 <UART_SetConfig+0x32c>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	095b      	lsrs	r3, r3, #5
 800194a:	2264      	movs	r2, #100	; 0x64
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	1aeb      	subs	r3, r5, r3
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	3332      	adds	r3, #50	; 0x32
 8001956:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <UART_SetConfig+0x32c>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	095b      	lsrs	r3, r3, #5
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001964:	441c      	add	r4, r3
 8001966:	f7ff fd13 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 800196a:	4602      	mov	r2, r0
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	009a      	lsls	r2, r3, #2
 8001974:	441a      	add	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001980:	f7ff fd06 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001984:	4602      	mov	r2, r0
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	009a      	lsls	r2, r3, #2
 800198e:	441a      	add	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4a47      	ldr	r2, [pc, #284]	; (8001ab8 <UART_SetConfig+0x32c>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	095b      	lsrs	r3, r3, #5
 80019a2:	2264      	movs	r2, #100	; 0x64
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	1aeb      	subs	r3, r5, r3
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	3332      	adds	r3, #50	; 0x32
 80019ae:	4a42      	ldr	r2, [pc, #264]	; (8001ab8 <UART_SetConfig+0x32c>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	f003 0207 	and.w	r2, r3, #7
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4422      	add	r2, r4
 80019c0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80019c2:	e0e7      	b.n	8001b94 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <UART_SetConfig+0x324>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d004      	beq.n	80019d8 <UART_SetConfig+0x24c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a38      	ldr	r2, [pc, #224]	; (8001ab4 <UART_SetConfig+0x328>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d171      	bne.n	8001abc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80019d8:	f7ff fcee 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	009a      	lsls	r2, r3, #2
 80019e6:	441a      	add	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4a31      	ldr	r2, [pc, #196]	; (8001ab8 <UART_SetConfig+0x32c>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	095b      	lsrs	r3, r3, #5
 80019fa:	011c      	lsls	r4, r3, #4
 80019fc:	f7ff fcdc 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	009a      	lsls	r2, r3, #2
 8001a0a:	441a      	add	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a16:	f7ff fccf 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	009a      	lsls	r2, r3, #2
 8001a24:	441a      	add	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <UART_SetConfig+0x32c>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2264      	movs	r2, #100	; 0x64
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	1aeb      	subs	r3, r5, r3
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	3332      	adds	r3, #50	; 0x32
 8001a44:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <UART_SetConfig+0x32c>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a50:	441c      	add	r4, r3
 8001a52:	f7ff fcb1 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009a      	lsls	r2, r3, #2
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a6c:	f7ff fca4 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	009a      	lsls	r2, r3, #2
 8001a7a:	441a      	add	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4a0c      	ldr	r2, [pc, #48]	; (8001ab8 <UART_SetConfig+0x32c>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	2264      	movs	r2, #100	; 0x64
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	1aeb      	subs	r3, r5, r3
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	3332      	adds	r3, #50	; 0x32
 8001a9a:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <UART_SetConfig+0x32c>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	f003 020f 	and.w	r2, r3, #15
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4422      	add	r2, r4
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	e071      	b.n	8001b94 <UART_SetConfig+0x408>
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40011400 	.word	0x40011400
 8001ab8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001abc:	f7ff fc68 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009a      	lsls	r2, r3, #2
 8001aca:	441a      	add	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4a31      	ldr	r2, [pc, #196]	; (8001b9c <UART_SetConfig+0x410>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	011c      	lsls	r4, r3, #4
 8001ae0:	f7ff fc56 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	009a      	lsls	r2, r3, #2
 8001aee:	441a      	add	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	fbb2 f5f3 	udiv	r5, r2, r3
 8001afa:	f7ff fc49 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009a      	lsls	r2, r3, #2
 8001b08:	441a      	add	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <UART_SetConfig+0x410>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2264      	movs	r2, #100	; 0x64
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	1aeb      	subs	r3, r5, r3
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	3332      	adds	r3, #50	; 0x32
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <UART_SetConfig+0x410>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b34:	441c      	add	r4, r3
 8001b36:	f7ff fc2b 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	009a      	lsls	r2, r3, #2
 8001b44:	441a      	add	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001b50:	f7ff fc1e 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009a      	lsls	r2, r3, #2
 8001b5e:	441a      	add	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <UART_SetConfig+0x410>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	2264      	movs	r2, #100	; 0x64
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	1aeb      	subs	r3, r5, r3
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	3332      	adds	r3, #50	; 0x32
 8001b7e:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <UART_SetConfig+0x410>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	f003 020f 	and.w	r2, r3, #15
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4422      	add	r2, r4
 8001b90:	609a      	str	r2, [r3, #8]
}
 8001b92:	e7ff      	b.n	8001b94 <UART_SetConfig+0x408>
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9c:	51eb851f 	.word	0x51eb851f

08001ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba4:	f7fe fcec 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba8:	f000 f89c 	bl	8001ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bac:	f000 f958 	bl	8001e60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bb0:	f000 f902 	bl	8001db8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001bb4:	f000 f92a 	bl	8001e0c <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_UART_Receive(&huart2, &value, 1, 1000) == HAL_OK){
 8001bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	493f      	ldr	r1, [pc, #252]	; (8001cbc <main+0x11c>)
 8001bc0:	483f      	ldr	r0, [pc, #252]	; (8001cc0 <main+0x120>)
 8001bc2:	f7ff fcf3 	bl	80015ac <HAL_UART_Receive>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f5      	bne.n	8001bb8 <main+0x18>
	  	  		  if((i==0 && value != 0x42) || (i == 1 && value != 0x4d)){
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <main+0x124>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <main+0x3c>
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <main+0x11c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b42      	cmp	r3, #66	; 0x42
 8001bda:	d16d      	bne.n	8001cb8 <main+0x118>
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <main+0x124>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d103      	bne.n	8001bec <main+0x4c>
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <main+0x11c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b4d      	cmp	r3, #77	; 0x4d
 8001bea:	d165      	bne.n	8001cb8 <main+0x118>
	  	  			  continue;
	  	  		  }
	  	  		  else if (i == 4 || i == 6 || i == 8 || i == 10 || i == 12 || i == 14) {
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <main+0x124>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d013      	beq.n	8001c1c <main+0x7c>
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <main+0x124>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b06      	cmp	r3, #6
 8001bfa:	d00f      	beq.n	8001c1c <main+0x7c>
 8001bfc:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <main+0x124>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d00b      	beq.n	8001c1c <main+0x7c>
 8001c04:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <main+0x124>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b0a      	cmp	r3, #10
 8001c0a:	d007      	beq.n	8001c1c <main+0x7c>
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <main+0x124>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d003      	beq.n	8001c1c <main+0x7c>
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <main+0x124>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b0e      	cmp	r3, #14
 8001c1a:	d104      	bne.n	8001c26 <main+0x86>
	  	  			  previousValue = value;
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <main+0x11c>)
 8001c1e:	781a      	ldrb	r2, [r3, #0]
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <main+0x128>)
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	e041      	b.n	8001caa <main+0x10a>
	  	  		  }
	  	  		  else if (i == 5){
 8001c26:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <main+0x124>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d10c      	bne.n	8001c48 <main+0xa8>
	  	  			  pm10 = 256 * previousValue + value;
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <main+0x128>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <main+0x11c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <main+0x12c>)
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	e030      	b.n	8001caa <main+0x10a>
	  	  		  }
	  	  		  else if (i == 7){
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <main+0x124>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d10c      	bne.n	8001c6a <main+0xca>
	  	  			  pm25 = 256 * previousValue + value;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <main+0x128>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <main+0x11c>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <main+0x130>)
 8001c66:	801a      	strh	r2, [r3, #0]
 8001c68:	e01f      	b.n	8001caa <main+0x10a>
	  	  		  }
	  	  		  else if (i >= 31){
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <main+0x124>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b1e      	cmp	r3, #30
 8001c70:	d91b      	bls.n	8001caa <main+0x10a>
	  	  			  i = -1;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <main+0x124>)
 8001c74:	22ff      	movs	r2, #255	; 0xff
 8001c76:	701a      	strb	r2, [r3, #0]
	  	  			  sprintf(buff, "!%4d;%4d", pm10, pm25);
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <main+0x12c>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <main+0x130>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	4914      	ldr	r1, [pc, #80]	; (8001cd4 <main+0x134>)
 8001c84:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <main+0x138>)
 8001c86:	f000 fad7 	bl	8002238 <siprintf>
	  	  			  HAL_UART_Transmit(&huart3, buff, strlen(buff), 1000);
 8001c8a:	4813      	ldr	r0, [pc, #76]	; (8001cd8 <main+0x138>)
 8001c8c:	f7fe faa0 	bl	80001d0 <strlen>
 8001c90:	4603      	mov	r3, r0
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c98:	490f      	ldr	r1, [pc, #60]	; (8001cd8 <main+0x138>)
 8001c9a:	4810      	ldr	r0, [pc, #64]	; (8001cdc <main+0x13c>)
 8001c9c:	f7ff fbed 	bl	800147a <HAL_UART_Transmit>
	  	  			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca4:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <main+0x140>)
 8001ca6:	f7fe ff76 	bl	8000b96 <HAL_GPIO_TogglePin>
	  	  		  }
	  	  		  i++;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <main+0x124>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <main+0x124>)
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e77f      	b.n	8001bb8 <main+0x18>
	  	  			  continue;
 8001cb8:	bf00      	nop
	  if(HAL_UART_Receive(&huart2, &value, 1, 1000) == HAL_OK){
 8001cba:	e77d      	b.n	8001bb8 <main+0x18>
 8001cbc:	20000134 	.word	0x20000134
 8001cc0:	200000f4 	.word	0x200000f4
 8001cc4:	20000090 	.word	0x20000090
 8001cc8:	200000f1 	.word	0x200000f1
 8001ccc:	2000008c 	.word	0x2000008c
 8001cd0:	2000008e 	.word	0x2000008e
 8001cd4:	08002a5c 	.word	0x08002a5c
 8001cd8:	200000e4 	.word	0x200000e4
 8001cdc:	200000a4 	.word	0x200000a4
 8001ce0:	40020c00 	.word	0x40020c00

08001ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b094      	sub	sp, #80	; 0x50
 8001ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cea:	f107 0320 	add.w	r3, r7, #32
 8001cee:	2230      	movs	r2, #48	; 0x30
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fa98 	bl	8002228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <SystemClock_Config+0xcc>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <SystemClock_Config+0xcc>)
 8001d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d16:	6413      	str	r3, [r2, #64]	; 0x40
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <SystemClock_Config+0xcc>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <SystemClock_Config+0xd0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <SystemClock_Config+0xd0>)
 8001d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <SystemClock_Config+0xd0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d40:	2302      	movs	r3, #2
 8001d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d44:	2301      	movs	r3, #1
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d48:	2310      	movs	r3, #16
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d50:	2300      	movs	r3, #0
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d54:	2308      	movs	r3, #8
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d58:	23a8      	movs	r3, #168	; 0xa8
 8001d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d60:	2304      	movs	r3, #4
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d64:	f107 0320 	add.w	r3, r7, #32
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe ff2f 	bl	8000bcc <HAL_RCC_OscConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d74:	f000 f8c6 	bl	8001f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d78:	230f      	movs	r3, #15
 8001d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2105      	movs	r1, #5
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f95a 	bl	8001050 <HAL_RCC_ClockConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001da2:	f000 f8af 	bl	8001f04 <Error_Handler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3750      	adds	r7, #80	; 0x50
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000

08001db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <MX_USART2_UART_Init+0x50>)
 8001dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001df0:	f7ff faf6 	bl	80013e0 <HAL_UART_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dfa:	f000 f883 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200000f4 	.word	0x200000f4
 8001e08:	40004400 	.word	0x40004400

08001e0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_USART3_UART_Init+0x4c>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <MX_USART3_UART_Init+0x50>)
 8001e14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_USART3_UART_Init+0x4c>)
 8001e18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_USART3_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_USART3_UART_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_USART3_UART_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_USART3_UART_Init+0x4c>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_USART3_UART_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_USART3_UART_Init+0x4c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_USART3_UART_Init+0x4c>)
 8001e44:	f7ff facc 	bl	80013e0 <HAL_UART_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e4e:	f000 f859 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200000a4 	.word	0x200000a4
 8001e5c:	40004800 	.word	0x40004800

08001e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <MX_GPIO_Init+0x9c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <MX_GPIO_Init+0x9c>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_GPIO_Init+0x9c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <MX_GPIO_Init+0x9c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a18      	ldr	r2, [pc, #96]	; (8001efc <MX_GPIO_Init+0x9c>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <MX_GPIO_Init+0x9c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <MX_GPIO_Init+0x9c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a11      	ldr	r2, [pc, #68]	; (8001efc <MX_GPIO_Init+0x9c>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_GPIO_Init+0x9c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ed0:	480b      	ldr	r0, [pc, #44]	; (8001f00 <MX_GPIO_Init+0xa0>)
 8001ed2:	f7fe fe47 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ed6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4619      	mov	r1, r3
 8001eee:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_GPIO_Init+0xa0>)
 8001ef0:	f7fe fc9e 	bl	8000830 <HAL_GPIO_Init>

}
 8001ef4:	bf00      	nop
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020c00 	.word	0x40020c00

08001f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_UART_MspInit+0xe8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d12c      	bne.n	8001fe0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_UART_MspInit+0xec>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a30      	ldr	r2, [pc, #192]	; (8002050 <HAL_UART_MspInit+0xec>)
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_UART_MspInit+0xec>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <HAL_UART_MspInit+0xec>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a29      	ldr	r2, [pc, #164]	; (8002050 <HAL_UART_MspInit+0xec>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_UART_MspInit+0xec>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	481e      	ldr	r0, [pc, #120]	; (8002054 <HAL_UART_MspInit+0xf0>)
 8001fda:	f7fe fc29 	bl	8000830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fde:	e031      	b.n	8002044 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_UART_MspInit+0xf4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12c      	bne.n	8002044 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_UART_MspInit+0xec>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a17      	ldr	r2, [pc, #92]	; (8002050 <HAL_UART_MspInit+0xec>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_UART_MspInit+0xec>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_UART_MspInit+0xec>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_UART_MspInit+0xec>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_UART_MspInit+0xec>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002022:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202c:	2301      	movs	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002034:	2307      	movs	r3, #7
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4807      	ldr	r0, [pc, #28]	; (800205c <HAL_UART_MspInit+0xf8>)
 8002040:	f7fe fbf6 	bl	8000830 <HAL_GPIO_Init>
}
 8002044:	bf00      	nop
 8002046:	3730      	adds	r7, #48	; 0x30
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40004400 	.word	0x40004400
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000
 8002058:	40004800 	.word	0x40004800
 800205c:	40020400 	.word	0x40020400

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b4:	f7fe fab6 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <_sbrk+0x50>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <_sbrk+0x16>
		heap_end = &end;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <_sbrk+0x50>)
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <_sbrk+0x54>)
 80020d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <_sbrk+0x50>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <_sbrk+0x50>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	466a      	mov	r2, sp
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d907      	bls.n	80020f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020e6:	f000 f875 	bl	80021d4 <__errno>
 80020ea:	4602      	mov	r2, r0
 80020ec:	230c      	movs	r3, #12
 80020ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	e006      	b.n	8002104 <_sbrk+0x48>
	}

	heap_end += incr;
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <_sbrk+0x50>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a03      	ldr	r2, [pc, #12]	; (800210c <_sbrk+0x50>)
 8002100:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000094 	.word	0x20000094
 8002110:	20000140 	.word	0x20000140

08002114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <SystemInit+0x60>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <SystemInit+0x60>)
 8002120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <SystemInit+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <SystemInit+0x64>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <SystemInit+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <SystemInit+0x64>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <SystemInit+0x64>)
 8002140:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <SystemInit+0x64>)
 800214c:	4a0b      	ldr	r2, [pc, #44]	; (800217c <SystemInit+0x68>)
 800214e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <SystemInit+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a08      	ldr	r2, [pc, #32]	; (8002178 <SystemInit+0x64>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <SystemInit+0x60>)
 8002164:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002168:	609a      	str	r2, [r3, #8]
#endif
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00
 8002178:	40023800 	.word	0x40023800
 800217c:	24003010 	.word	0x24003010

08002180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002184:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002186:	e003      	b.n	8002190 <LoopCopyDataInit>

08002188 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800218a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800218c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800218e:	3104      	adds	r1, #4

08002190 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002190:	480b      	ldr	r0, [pc, #44]	; (80021c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002194:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002196:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002198:	d3f6      	bcc.n	8002188 <CopyDataInit>
  ldr  r2, =_sbss
 800219a:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800219c:	e002      	b.n	80021a4 <LoopFillZerobss>

0800219e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800219e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021a0:	f842 3b04 	str.w	r3, [r2], #4

080021a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021a8:	d3f9      	bcc.n	800219e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021aa:	f7ff ffb3 	bl	8002114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ae:	f000 f817 	bl	80021e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b2:	f7ff fcf5 	bl	8001ba0 <main>
  bx  lr    
 80021b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021bc:	08002ac4 	.word	0x08002ac4
  ldr  r0, =_sdata
 80021c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021c4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80021c8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80021cc:	2000013c 	.word	0x2000013c

080021d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC_IRQHandler>
	...

080021d4 <__errno>:
 80021d4:	4b01      	ldr	r3, [pc, #4]	; (80021dc <__errno+0x8>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	2000000c 	.word	0x2000000c

080021e0 <__libc_init_array>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	4e0d      	ldr	r6, [pc, #52]	; (8002218 <__libc_init_array+0x38>)
 80021e4:	4c0d      	ldr	r4, [pc, #52]	; (800221c <__libc_init_array+0x3c>)
 80021e6:	1ba4      	subs	r4, r4, r6
 80021e8:	10a4      	asrs	r4, r4, #2
 80021ea:	2500      	movs	r5, #0
 80021ec:	42a5      	cmp	r5, r4
 80021ee:	d109      	bne.n	8002204 <__libc_init_array+0x24>
 80021f0:	4e0b      	ldr	r6, [pc, #44]	; (8002220 <__libc_init_array+0x40>)
 80021f2:	4c0c      	ldr	r4, [pc, #48]	; (8002224 <__libc_init_array+0x44>)
 80021f4:	f000 fc26 	bl	8002a44 <_init>
 80021f8:	1ba4      	subs	r4, r4, r6
 80021fa:	10a4      	asrs	r4, r4, #2
 80021fc:	2500      	movs	r5, #0
 80021fe:	42a5      	cmp	r5, r4
 8002200:	d105      	bne.n	800220e <__libc_init_array+0x2e>
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002208:	4798      	blx	r3
 800220a:	3501      	adds	r5, #1
 800220c:	e7ee      	b.n	80021ec <__libc_init_array+0xc>
 800220e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002212:	4798      	blx	r3
 8002214:	3501      	adds	r5, #1
 8002216:	e7f2      	b.n	80021fe <__libc_init_array+0x1e>
 8002218:	08002abc 	.word	0x08002abc
 800221c:	08002abc 	.word	0x08002abc
 8002220:	08002abc 	.word	0x08002abc
 8002224:	08002ac0 	.word	0x08002ac0

08002228 <memset>:
 8002228:	4402      	add	r2, r0
 800222a:	4603      	mov	r3, r0
 800222c:	4293      	cmp	r3, r2
 800222e:	d100      	bne.n	8002232 <memset+0xa>
 8002230:	4770      	bx	lr
 8002232:	f803 1b01 	strb.w	r1, [r3], #1
 8002236:	e7f9      	b.n	800222c <memset+0x4>

08002238 <siprintf>:
 8002238:	b40e      	push	{r1, r2, r3}
 800223a:	b500      	push	{lr}
 800223c:	b09c      	sub	sp, #112	; 0x70
 800223e:	ab1d      	add	r3, sp, #116	; 0x74
 8002240:	9002      	str	r0, [sp, #8]
 8002242:	9006      	str	r0, [sp, #24]
 8002244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002248:	4809      	ldr	r0, [pc, #36]	; (8002270 <siprintf+0x38>)
 800224a:	9107      	str	r1, [sp, #28]
 800224c:	9104      	str	r1, [sp, #16]
 800224e:	4909      	ldr	r1, [pc, #36]	; (8002274 <siprintf+0x3c>)
 8002250:	f853 2b04 	ldr.w	r2, [r3], #4
 8002254:	9105      	str	r1, [sp, #20]
 8002256:	6800      	ldr	r0, [r0, #0]
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	a902      	add	r1, sp, #8
 800225c:	f000 f866 	bl	800232c <_svfiprintf_r>
 8002260:	9b02      	ldr	r3, [sp, #8]
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	b01c      	add	sp, #112	; 0x70
 8002268:	f85d eb04 	ldr.w	lr, [sp], #4
 800226c:	b003      	add	sp, #12
 800226e:	4770      	bx	lr
 8002270:	2000000c 	.word	0x2000000c
 8002274:	ffff0208 	.word	0xffff0208

08002278 <__ssputs_r>:
 8002278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800227c:	688e      	ldr	r6, [r1, #8]
 800227e:	429e      	cmp	r6, r3
 8002280:	4682      	mov	sl, r0
 8002282:	460c      	mov	r4, r1
 8002284:	4690      	mov	r8, r2
 8002286:	4699      	mov	r9, r3
 8002288:	d837      	bhi.n	80022fa <__ssputs_r+0x82>
 800228a:	898a      	ldrh	r2, [r1, #12]
 800228c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002290:	d031      	beq.n	80022f6 <__ssputs_r+0x7e>
 8002292:	6825      	ldr	r5, [r4, #0]
 8002294:	6909      	ldr	r1, [r1, #16]
 8002296:	1a6f      	subs	r7, r5, r1
 8002298:	6965      	ldr	r5, [r4, #20]
 800229a:	2302      	movs	r3, #2
 800229c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80022a4:	f109 0301 	add.w	r3, r9, #1
 80022a8:	443b      	add	r3, r7
 80022aa:	429d      	cmp	r5, r3
 80022ac:	bf38      	it	cc
 80022ae:	461d      	movcc	r5, r3
 80022b0:	0553      	lsls	r3, r2, #21
 80022b2:	d530      	bpl.n	8002316 <__ssputs_r+0x9e>
 80022b4:	4629      	mov	r1, r5
 80022b6:	f000 fb2b 	bl	8002910 <_malloc_r>
 80022ba:	4606      	mov	r6, r0
 80022bc:	b950      	cbnz	r0, 80022d4 <__ssputs_r+0x5c>
 80022be:	230c      	movs	r3, #12
 80022c0:	f8ca 3000 	str.w	r3, [sl]
 80022c4:	89a3      	ldrh	r3, [r4, #12]
 80022c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ca:	81a3      	strh	r3, [r4, #12]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022d4:	463a      	mov	r2, r7
 80022d6:	6921      	ldr	r1, [r4, #16]
 80022d8:	f000 faa8 	bl	800282c <memcpy>
 80022dc:	89a3      	ldrh	r3, [r4, #12]
 80022de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e6:	81a3      	strh	r3, [r4, #12]
 80022e8:	6126      	str	r6, [r4, #16]
 80022ea:	6165      	str	r5, [r4, #20]
 80022ec:	443e      	add	r6, r7
 80022ee:	1bed      	subs	r5, r5, r7
 80022f0:	6026      	str	r6, [r4, #0]
 80022f2:	60a5      	str	r5, [r4, #8]
 80022f4:	464e      	mov	r6, r9
 80022f6:	454e      	cmp	r6, r9
 80022f8:	d900      	bls.n	80022fc <__ssputs_r+0x84>
 80022fa:	464e      	mov	r6, r9
 80022fc:	4632      	mov	r2, r6
 80022fe:	4641      	mov	r1, r8
 8002300:	6820      	ldr	r0, [r4, #0]
 8002302:	f000 fa9e 	bl	8002842 <memmove>
 8002306:	68a3      	ldr	r3, [r4, #8]
 8002308:	1b9b      	subs	r3, r3, r6
 800230a:	60a3      	str	r3, [r4, #8]
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	441e      	add	r6, r3
 8002310:	6026      	str	r6, [r4, #0]
 8002312:	2000      	movs	r0, #0
 8002314:	e7dc      	b.n	80022d0 <__ssputs_r+0x58>
 8002316:	462a      	mov	r2, r5
 8002318:	f000 fb54 	bl	80029c4 <_realloc_r>
 800231c:	4606      	mov	r6, r0
 800231e:	2800      	cmp	r0, #0
 8002320:	d1e2      	bne.n	80022e8 <__ssputs_r+0x70>
 8002322:	6921      	ldr	r1, [r4, #16]
 8002324:	4650      	mov	r0, sl
 8002326:	f000 faa5 	bl	8002874 <_free_r>
 800232a:	e7c8      	b.n	80022be <__ssputs_r+0x46>

0800232c <_svfiprintf_r>:
 800232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002330:	461d      	mov	r5, r3
 8002332:	898b      	ldrh	r3, [r1, #12]
 8002334:	061f      	lsls	r7, r3, #24
 8002336:	b09d      	sub	sp, #116	; 0x74
 8002338:	4680      	mov	r8, r0
 800233a:	460c      	mov	r4, r1
 800233c:	4616      	mov	r6, r2
 800233e:	d50f      	bpl.n	8002360 <_svfiprintf_r+0x34>
 8002340:	690b      	ldr	r3, [r1, #16]
 8002342:	b96b      	cbnz	r3, 8002360 <_svfiprintf_r+0x34>
 8002344:	2140      	movs	r1, #64	; 0x40
 8002346:	f000 fae3 	bl	8002910 <_malloc_r>
 800234a:	6020      	str	r0, [r4, #0]
 800234c:	6120      	str	r0, [r4, #16]
 800234e:	b928      	cbnz	r0, 800235c <_svfiprintf_r+0x30>
 8002350:	230c      	movs	r3, #12
 8002352:	f8c8 3000 	str.w	r3, [r8]
 8002356:	f04f 30ff 	mov.w	r0, #4294967295
 800235a:	e0c8      	b.n	80024ee <_svfiprintf_r+0x1c2>
 800235c:	2340      	movs	r3, #64	; 0x40
 800235e:	6163      	str	r3, [r4, #20]
 8002360:	2300      	movs	r3, #0
 8002362:	9309      	str	r3, [sp, #36]	; 0x24
 8002364:	2320      	movs	r3, #32
 8002366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800236a:	2330      	movs	r3, #48	; 0x30
 800236c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002370:	9503      	str	r5, [sp, #12]
 8002372:	f04f 0b01 	mov.w	fp, #1
 8002376:	4637      	mov	r7, r6
 8002378:	463d      	mov	r5, r7
 800237a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800237e:	b10b      	cbz	r3, 8002384 <_svfiprintf_r+0x58>
 8002380:	2b25      	cmp	r3, #37	; 0x25
 8002382:	d13e      	bne.n	8002402 <_svfiprintf_r+0xd6>
 8002384:	ebb7 0a06 	subs.w	sl, r7, r6
 8002388:	d00b      	beq.n	80023a2 <_svfiprintf_r+0x76>
 800238a:	4653      	mov	r3, sl
 800238c:	4632      	mov	r2, r6
 800238e:	4621      	mov	r1, r4
 8002390:	4640      	mov	r0, r8
 8002392:	f7ff ff71 	bl	8002278 <__ssputs_r>
 8002396:	3001      	adds	r0, #1
 8002398:	f000 80a4 	beq.w	80024e4 <_svfiprintf_r+0x1b8>
 800239c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800239e:	4453      	add	r3, sl
 80023a0:	9309      	str	r3, [sp, #36]	; 0x24
 80023a2:	783b      	ldrb	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 809d 	beq.w	80024e4 <_svfiprintf_r+0x1b8>
 80023aa:	2300      	movs	r3, #0
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023b4:	9304      	str	r3, [sp, #16]
 80023b6:	9307      	str	r3, [sp, #28]
 80023b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023bc:	931a      	str	r3, [sp, #104]	; 0x68
 80023be:	462f      	mov	r7, r5
 80023c0:	2205      	movs	r2, #5
 80023c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80023c6:	4850      	ldr	r0, [pc, #320]	; (8002508 <_svfiprintf_r+0x1dc>)
 80023c8:	f7fd ff0a 	bl	80001e0 <memchr>
 80023cc:	9b04      	ldr	r3, [sp, #16]
 80023ce:	b9d0      	cbnz	r0, 8002406 <_svfiprintf_r+0xda>
 80023d0:	06d9      	lsls	r1, r3, #27
 80023d2:	bf44      	itt	mi
 80023d4:	2220      	movmi	r2, #32
 80023d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023da:	071a      	lsls	r2, r3, #28
 80023dc:	bf44      	itt	mi
 80023de:	222b      	movmi	r2, #43	; 0x2b
 80023e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023e4:	782a      	ldrb	r2, [r5, #0]
 80023e6:	2a2a      	cmp	r2, #42	; 0x2a
 80023e8:	d015      	beq.n	8002416 <_svfiprintf_r+0xea>
 80023ea:	9a07      	ldr	r2, [sp, #28]
 80023ec:	462f      	mov	r7, r5
 80023ee:	2000      	movs	r0, #0
 80023f0:	250a      	movs	r5, #10
 80023f2:	4639      	mov	r1, r7
 80023f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023f8:	3b30      	subs	r3, #48	; 0x30
 80023fa:	2b09      	cmp	r3, #9
 80023fc:	d94d      	bls.n	800249a <_svfiprintf_r+0x16e>
 80023fe:	b1b8      	cbz	r0, 8002430 <_svfiprintf_r+0x104>
 8002400:	e00f      	b.n	8002422 <_svfiprintf_r+0xf6>
 8002402:	462f      	mov	r7, r5
 8002404:	e7b8      	b.n	8002378 <_svfiprintf_r+0x4c>
 8002406:	4a40      	ldr	r2, [pc, #256]	; (8002508 <_svfiprintf_r+0x1dc>)
 8002408:	1a80      	subs	r0, r0, r2
 800240a:	fa0b f000 	lsl.w	r0, fp, r0
 800240e:	4318      	orrs	r0, r3
 8002410:	9004      	str	r0, [sp, #16]
 8002412:	463d      	mov	r5, r7
 8002414:	e7d3      	b.n	80023be <_svfiprintf_r+0x92>
 8002416:	9a03      	ldr	r2, [sp, #12]
 8002418:	1d11      	adds	r1, r2, #4
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	9103      	str	r1, [sp, #12]
 800241e:	2a00      	cmp	r2, #0
 8002420:	db01      	blt.n	8002426 <_svfiprintf_r+0xfa>
 8002422:	9207      	str	r2, [sp, #28]
 8002424:	e004      	b.n	8002430 <_svfiprintf_r+0x104>
 8002426:	4252      	negs	r2, r2
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	9207      	str	r2, [sp, #28]
 800242e:	9304      	str	r3, [sp, #16]
 8002430:	783b      	ldrb	r3, [r7, #0]
 8002432:	2b2e      	cmp	r3, #46	; 0x2e
 8002434:	d10c      	bne.n	8002450 <_svfiprintf_r+0x124>
 8002436:	787b      	ldrb	r3, [r7, #1]
 8002438:	2b2a      	cmp	r3, #42	; 0x2a
 800243a:	d133      	bne.n	80024a4 <_svfiprintf_r+0x178>
 800243c:	9b03      	ldr	r3, [sp, #12]
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	9203      	str	r2, [sp, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	bfb8      	it	lt
 8002448:	f04f 33ff 	movlt.w	r3, #4294967295
 800244c:	3702      	adds	r7, #2
 800244e:	9305      	str	r3, [sp, #20]
 8002450:	4d2e      	ldr	r5, [pc, #184]	; (800250c <_svfiprintf_r+0x1e0>)
 8002452:	7839      	ldrb	r1, [r7, #0]
 8002454:	2203      	movs	r2, #3
 8002456:	4628      	mov	r0, r5
 8002458:	f7fd fec2 	bl	80001e0 <memchr>
 800245c:	b138      	cbz	r0, 800246e <_svfiprintf_r+0x142>
 800245e:	2340      	movs	r3, #64	; 0x40
 8002460:	1b40      	subs	r0, r0, r5
 8002462:	fa03 f000 	lsl.w	r0, r3, r0
 8002466:	9b04      	ldr	r3, [sp, #16]
 8002468:	4303      	orrs	r3, r0
 800246a:	3701      	adds	r7, #1
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	7839      	ldrb	r1, [r7, #0]
 8002470:	4827      	ldr	r0, [pc, #156]	; (8002510 <_svfiprintf_r+0x1e4>)
 8002472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002476:	2206      	movs	r2, #6
 8002478:	1c7e      	adds	r6, r7, #1
 800247a:	f7fd feb1 	bl	80001e0 <memchr>
 800247e:	2800      	cmp	r0, #0
 8002480:	d038      	beq.n	80024f4 <_svfiprintf_r+0x1c8>
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <_svfiprintf_r+0x1e8>)
 8002484:	bb13      	cbnz	r3, 80024cc <_svfiprintf_r+0x1a0>
 8002486:	9b03      	ldr	r3, [sp, #12]
 8002488:	3307      	adds	r3, #7
 800248a:	f023 0307 	bic.w	r3, r3, #7
 800248e:	3308      	adds	r3, #8
 8002490:	9303      	str	r3, [sp, #12]
 8002492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002494:	444b      	add	r3, r9
 8002496:	9309      	str	r3, [sp, #36]	; 0x24
 8002498:	e76d      	b.n	8002376 <_svfiprintf_r+0x4a>
 800249a:	fb05 3202 	mla	r2, r5, r2, r3
 800249e:	2001      	movs	r0, #1
 80024a0:	460f      	mov	r7, r1
 80024a2:	e7a6      	b.n	80023f2 <_svfiprintf_r+0xc6>
 80024a4:	2300      	movs	r3, #0
 80024a6:	3701      	adds	r7, #1
 80024a8:	9305      	str	r3, [sp, #20]
 80024aa:	4619      	mov	r1, r3
 80024ac:	250a      	movs	r5, #10
 80024ae:	4638      	mov	r0, r7
 80024b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024b4:	3a30      	subs	r2, #48	; 0x30
 80024b6:	2a09      	cmp	r2, #9
 80024b8:	d903      	bls.n	80024c2 <_svfiprintf_r+0x196>
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0c8      	beq.n	8002450 <_svfiprintf_r+0x124>
 80024be:	9105      	str	r1, [sp, #20]
 80024c0:	e7c6      	b.n	8002450 <_svfiprintf_r+0x124>
 80024c2:	fb05 2101 	mla	r1, r5, r1, r2
 80024c6:	2301      	movs	r3, #1
 80024c8:	4607      	mov	r7, r0
 80024ca:	e7f0      	b.n	80024ae <_svfiprintf_r+0x182>
 80024cc:	ab03      	add	r3, sp, #12
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4622      	mov	r2, r4
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <_svfiprintf_r+0x1ec>)
 80024d4:	a904      	add	r1, sp, #16
 80024d6:	4640      	mov	r0, r8
 80024d8:	f3af 8000 	nop.w
 80024dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80024e0:	4681      	mov	r9, r0
 80024e2:	d1d6      	bne.n	8002492 <_svfiprintf_r+0x166>
 80024e4:	89a3      	ldrh	r3, [r4, #12]
 80024e6:	065b      	lsls	r3, r3, #25
 80024e8:	f53f af35 	bmi.w	8002356 <_svfiprintf_r+0x2a>
 80024ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024ee:	b01d      	add	sp, #116	; 0x74
 80024f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024f4:	ab03      	add	r3, sp, #12
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4622      	mov	r2, r4
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <_svfiprintf_r+0x1ec>)
 80024fc:	a904      	add	r1, sp, #16
 80024fe:	4640      	mov	r0, r8
 8002500:	f000 f882 	bl	8002608 <_printf_i>
 8002504:	e7ea      	b.n	80024dc <_svfiprintf_r+0x1b0>
 8002506:	bf00      	nop
 8002508:	08002a80 	.word	0x08002a80
 800250c:	08002a86 	.word	0x08002a86
 8002510:	08002a8a 	.word	0x08002a8a
 8002514:	00000000 	.word	0x00000000
 8002518:	08002279 	.word	0x08002279

0800251c <_printf_common>:
 800251c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002520:	4691      	mov	r9, r2
 8002522:	461f      	mov	r7, r3
 8002524:	688a      	ldr	r2, [r1, #8]
 8002526:	690b      	ldr	r3, [r1, #16]
 8002528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800252c:	4293      	cmp	r3, r2
 800252e:	bfb8      	it	lt
 8002530:	4613      	movlt	r3, r2
 8002532:	f8c9 3000 	str.w	r3, [r9]
 8002536:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800253a:	4606      	mov	r6, r0
 800253c:	460c      	mov	r4, r1
 800253e:	b112      	cbz	r2, 8002546 <_printf_common+0x2a>
 8002540:	3301      	adds	r3, #1
 8002542:	f8c9 3000 	str.w	r3, [r9]
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	0699      	lsls	r1, r3, #26
 800254a:	bf42      	ittt	mi
 800254c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002550:	3302      	addmi	r3, #2
 8002552:	f8c9 3000 	strmi.w	r3, [r9]
 8002556:	6825      	ldr	r5, [r4, #0]
 8002558:	f015 0506 	ands.w	r5, r5, #6
 800255c:	d107      	bne.n	800256e <_printf_common+0x52>
 800255e:	f104 0a19 	add.w	sl, r4, #25
 8002562:	68e3      	ldr	r3, [r4, #12]
 8002564:	f8d9 2000 	ldr.w	r2, [r9]
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	42ab      	cmp	r3, r5
 800256c:	dc28      	bgt.n	80025c0 <_printf_common+0xa4>
 800256e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	3300      	adds	r3, #0
 8002576:	bf18      	it	ne
 8002578:	2301      	movne	r3, #1
 800257a:	0692      	lsls	r2, r2, #26
 800257c:	d42d      	bmi.n	80025da <_printf_common+0xbe>
 800257e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002582:	4639      	mov	r1, r7
 8002584:	4630      	mov	r0, r6
 8002586:	47c0      	blx	r8
 8002588:	3001      	adds	r0, #1
 800258a:	d020      	beq.n	80025ce <_printf_common+0xb2>
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	68e5      	ldr	r5, [r4, #12]
 8002590:	f8d9 2000 	ldr.w	r2, [r9]
 8002594:	f003 0306 	and.w	r3, r3, #6
 8002598:	2b04      	cmp	r3, #4
 800259a:	bf08      	it	eq
 800259c:	1aad      	subeq	r5, r5, r2
 800259e:	68a3      	ldr	r3, [r4, #8]
 80025a0:	6922      	ldr	r2, [r4, #16]
 80025a2:	bf0c      	ite	eq
 80025a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025a8:	2500      	movne	r5, #0
 80025aa:	4293      	cmp	r3, r2
 80025ac:	bfc4      	itt	gt
 80025ae:	1a9b      	subgt	r3, r3, r2
 80025b0:	18ed      	addgt	r5, r5, r3
 80025b2:	f04f 0900 	mov.w	r9, #0
 80025b6:	341a      	adds	r4, #26
 80025b8:	454d      	cmp	r5, r9
 80025ba:	d11a      	bne.n	80025f2 <_printf_common+0xd6>
 80025bc:	2000      	movs	r0, #0
 80025be:	e008      	b.n	80025d2 <_printf_common+0xb6>
 80025c0:	2301      	movs	r3, #1
 80025c2:	4652      	mov	r2, sl
 80025c4:	4639      	mov	r1, r7
 80025c6:	4630      	mov	r0, r6
 80025c8:	47c0      	blx	r8
 80025ca:	3001      	adds	r0, #1
 80025cc:	d103      	bne.n	80025d6 <_printf_common+0xba>
 80025ce:	f04f 30ff 	mov.w	r0, #4294967295
 80025d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d6:	3501      	adds	r5, #1
 80025d8:	e7c3      	b.n	8002562 <_printf_common+0x46>
 80025da:	18e1      	adds	r1, r4, r3
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	2030      	movs	r0, #48	; 0x30
 80025e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025e4:	4422      	add	r2, r4
 80025e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025ee:	3302      	adds	r3, #2
 80025f0:	e7c5      	b.n	800257e <_printf_common+0x62>
 80025f2:	2301      	movs	r3, #1
 80025f4:	4622      	mov	r2, r4
 80025f6:	4639      	mov	r1, r7
 80025f8:	4630      	mov	r0, r6
 80025fa:	47c0      	blx	r8
 80025fc:	3001      	adds	r0, #1
 80025fe:	d0e6      	beq.n	80025ce <_printf_common+0xb2>
 8002600:	f109 0901 	add.w	r9, r9, #1
 8002604:	e7d8      	b.n	80025b8 <_printf_common+0x9c>
	...

08002608 <_printf_i>:
 8002608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800260c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002610:	460c      	mov	r4, r1
 8002612:	7e09      	ldrb	r1, [r1, #24]
 8002614:	b085      	sub	sp, #20
 8002616:	296e      	cmp	r1, #110	; 0x6e
 8002618:	4617      	mov	r7, r2
 800261a:	4606      	mov	r6, r0
 800261c:	4698      	mov	r8, r3
 800261e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002620:	f000 80b3 	beq.w	800278a <_printf_i+0x182>
 8002624:	d822      	bhi.n	800266c <_printf_i+0x64>
 8002626:	2963      	cmp	r1, #99	; 0x63
 8002628:	d036      	beq.n	8002698 <_printf_i+0x90>
 800262a:	d80a      	bhi.n	8002642 <_printf_i+0x3a>
 800262c:	2900      	cmp	r1, #0
 800262e:	f000 80b9 	beq.w	80027a4 <_printf_i+0x19c>
 8002632:	2958      	cmp	r1, #88	; 0x58
 8002634:	f000 8083 	beq.w	800273e <_printf_i+0x136>
 8002638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800263c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002640:	e032      	b.n	80026a8 <_printf_i+0xa0>
 8002642:	2964      	cmp	r1, #100	; 0x64
 8002644:	d001      	beq.n	800264a <_printf_i+0x42>
 8002646:	2969      	cmp	r1, #105	; 0x69
 8002648:	d1f6      	bne.n	8002638 <_printf_i+0x30>
 800264a:	6820      	ldr	r0, [r4, #0]
 800264c:	6813      	ldr	r3, [r2, #0]
 800264e:	0605      	lsls	r5, r0, #24
 8002650:	f103 0104 	add.w	r1, r3, #4
 8002654:	d52a      	bpl.n	80026ac <_printf_i+0xa4>
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6011      	str	r1, [r2, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da03      	bge.n	8002666 <_printf_i+0x5e>
 800265e:	222d      	movs	r2, #45	; 0x2d
 8002660:	425b      	negs	r3, r3
 8002662:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002666:	486f      	ldr	r0, [pc, #444]	; (8002824 <_printf_i+0x21c>)
 8002668:	220a      	movs	r2, #10
 800266a:	e039      	b.n	80026e0 <_printf_i+0xd8>
 800266c:	2973      	cmp	r1, #115	; 0x73
 800266e:	f000 809d 	beq.w	80027ac <_printf_i+0x1a4>
 8002672:	d808      	bhi.n	8002686 <_printf_i+0x7e>
 8002674:	296f      	cmp	r1, #111	; 0x6f
 8002676:	d020      	beq.n	80026ba <_printf_i+0xb2>
 8002678:	2970      	cmp	r1, #112	; 0x70
 800267a:	d1dd      	bne.n	8002638 <_printf_i+0x30>
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	f043 0320 	orr.w	r3, r3, #32
 8002682:	6023      	str	r3, [r4, #0]
 8002684:	e003      	b.n	800268e <_printf_i+0x86>
 8002686:	2975      	cmp	r1, #117	; 0x75
 8002688:	d017      	beq.n	80026ba <_printf_i+0xb2>
 800268a:	2978      	cmp	r1, #120	; 0x78
 800268c:	d1d4      	bne.n	8002638 <_printf_i+0x30>
 800268e:	2378      	movs	r3, #120	; 0x78
 8002690:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002694:	4864      	ldr	r0, [pc, #400]	; (8002828 <_printf_i+0x220>)
 8002696:	e055      	b.n	8002744 <_printf_i+0x13c>
 8002698:	6813      	ldr	r3, [r2, #0]
 800269a:	1d19      	adds	r1, r3, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6011      	str	r1, [r2, #0]
 80026a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026a8:	2301      	movs	r3, #1
 80026aa:	e08c      	b.n	80027c6 <_printf_i+0x1be>
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6011      	str	r1, [r2, #0]
 80026b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026b4:	bf18      	it	ne
 80026b6:	b21b      	sxthne	r3, r3
 80026b8:	e7cf      	b.n	800265a <_printf_i+0x52>
 80026ba:	6813      	ldr	r3, [r2, #0]
 80026bc:	6825      	ldr	r5, [r4, #0]
 80026be:	1d18      	adds	r0, r3, #4
 80026c0:	6010      	str	r0, [r2, #0]
 80026c2:	0628      	lsls	r0, r5, #24
 80026c4:	d501      	bpl.n	80026ca <_printf_i+0xc2>
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	e002      	b.n	80026d0 <_printf_i+0xc8>
 80026ca:	0668      	lsls	r0, r5, #25
 80026cc:	d5fb      	bpl.n	80026c6 <_printf_i+0xbe>
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	4854      	ldr	r0, [pc, #336]	; (8002824 <_printf_i+0x21c>)
 80026d2:	296f      	cmp	r1, #111	; 0x6f
 80026d4:	bf14      	ite	ne
 80026d6:	220a      	movne	r2, #10
 80026d8:	2208      	moveq	r2, #8
 80026da:	2100      	movs	r1, #0
 80026dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026e0:	6865      	ldr	r5, [r4, #4]
 80026e2:	60a5      	str	r5, [r4, #8]
 80026e4:	2d00      	cmp	r5, #0
 80026e6:	f2c0 8095 	blt.w	8002814 <_printf_i+0x20c>
 80026ea:	6821      	ldr	r1, [r4, #0]
 80026ec:	f021 0104 	bic.w	r1, r1, #4
 80026f0:	6021      	str	r1, [r4, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d13d      	bne.n	8002772 <_printf_i+0x16a>
 80026f6:	2d00      	cmp	r5, #0
 80026f8:	f040 808e 	bne.w	8002818 <_printf_i+0x210>
 80026fc:	4665      	mov	r5, ip
 80026fe:	2a08      	cmp	r2, #8
 8002700:	d10b      	bne.n	800271a <_printf_i+0x112>
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	07db      	lsls	r3, r3, #31
 8002706:	d508      	bpl.n	800271a <_printf_i+0x112>
 8002708:	6923      	ldr	r3, [r4, #16]
 800270a:	6862      	ldr	r2, [r4, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	bfde      	ittt	le
 8002710:	2330      	movle	r3, #48	; 0x30
 8002712:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002716:	f105 35ff 	addle.w	r5, r5, #4294967295
 800271a:	ebac 0305 	sub.w	r3, ip, r5
 800271e:	6123      	str	r3, [r4, #16]
 8002720:	f8cd 8000 	str.w	r8, [sp]
 8002724:	463b      	mov	r3, r7
 8002726:	aa03      	add	r2, sp, #12
 8002728:	4621      	mov	r1, r4
 800272a:	4630      	mov	r0, r6
 800272c:	f7ff fef6 	bl	800251c <_printf_common>
 8002730:	3001      	adds	r0, #1
 8002732:	d14d      	bne.n	80027d0 <_printf_i+0x1c8>
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	b005      	add	sp, #20
 800273a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800273e:	4839      	ldr	r0, [pc, #228]	; (8002824 <_printf_i+0x21c>)
 8002740:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002744:	6813      	ldr	r3, [r2, #0]
 8002746:	6821      	ldr	r1, [r4, #0]
 8002748:	1d1d      	adds	r5, r3, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6015      	str	r5, [r2, #0]
 800274e:	060a      	lsls	r2, r1, #24
 8002750:	d50b      	bpl.n	800276a <_printf_i+0x162>
 8002752:	07ca      	lsls	r2, r1, #31
 8002754:	bf44      	itt	mi
 8002756:	f041 0120 	orrmi.w	r1, r1, #32
 800275a:	6021      	strmi	r1, [r4, #0]
 800275c:	b91b      	cbnz	r3, 8002766 <_printf_i+0x15e>
 800275e:	6822      	ldr	r2, [r4, #0]
 8002760:	f022 0220 	bic.w	r2, r2, #32
 8002764:	6022      	str	r2, [r4, #0]
 8002766:	2210      	movs	r2, #16
 8002768:	e7b7      	b.n	80026da <_printf_i+0xd2>
 800276a:	064d      	lsls	r5, r1, #25
 800276c:	bf48      	it	mi
 800276e:	b29b      	uxthmi	r3, r3
 8002770:	e7ef      	b.n	8002752 <_printf_i+0x14a>
 8002772:	4665      	mov	r5, ip
 8002774:	fbb3 f1f2 	udiv	r1, r3, r2
 8002778:	fb02 3311 	mls	r3, r2, r1, r3
 800277c:	5cc3      	ldrb	r3, [r0, r3]
 800277e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002782:	460b      	mov	r3, r1
 8002784:	2900      	cmp	r1, #0
 8002786:	d1f5      	bne.n	8002774 <_printf_i+0x16c>
 8002788:	e7b9      	b.n	80026fe <_printf_i+0xf6>
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	6825      	ldr	r5, [r4, #0]
 800278e:	6961      	ldr	r1, [r4, #20]
 8002790:	1d18      	adds	r0, r3, #4
 8002792:	6010      	str	r0, [r2, #0]
 8002794:	0628      	lsls	r0, r5, #24
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	d501      	bpl.n	800279e <_printf_i+0x196>
 800279a:	6019      	str	r1, [r3, #0]
 800279c:	e002      	b.n	80027a4 <_printf_i+0x19c>
 800279e:	066a      	lsls	r2, r5, #25
 80027a0:	d5fb      	bpl.n	800279a <_printf_i+0x192>
 80027a2:	8019      	strh	r1, [r3, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	6123      	str	r3, [r4, #16]
 80027a8:	4665      	mov	r5, ip
 80027aa:	e7b9      	b.n	8002720 <_printf_i+0x118>
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	1d19      	adds	r1, r3, #4
 80027b0:	6011      	str	r1, [r2, #0]
 80027b2:	681d      	ldr	r5, [r3, #0]
 80027b4:	6862      	ldr	r2, [r4, #4]
 80027b6:	2100      	movs	r1, #0
 80027b8:	4628      	mov	r0, r5
 80027ba:	f7fd fd11 	bl	80001e0 <memchr>
 80027be:	b108      	cbz	r0, 80027c4 <_printf_i+0x1bc>
 80027c0:	1b40      	subs	r0, r0, r5
 80027c2:	6060      	str	r0, [r4, #4]
 80027c4:	6863      	ldr	r3, [r4, #4]
 80027c6:	6123      	str	r3, [r4, #16]
 80027c8:	2300      	movs	r3, #0
 80027ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027ce:	e7a7      	b.n	8002720 <_printf_i+0x118>
 80027d0:	6923      	ldr	r3, [r4, #16]
 80027d2:	462a      	mov	r2, r5
 80027d4:	4639      	mov	r1, r7
 80027d6:	4630      	mov	r0, r6
 80027d8:	47c0      	blx	r8
 80027da:	3001      	adds	r0, #1
 80027dc:	d0aa      	beq.n	8002734 <_printf_i+0x12c>
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	079b      	lsls	r3, r3, #30
 80027e2:	d413      	bmi.n	800280c <_printf_i+0x204>
 80027e4:	68e0      	ldr	r0, [r4, #12]
 80027e6:	9b03      	ldr	r3, [sp, #12]
 80027e8:	4298      	cmp	r0, r3
 80027ea:	bfb8      	it	lt
 80027ec:	4618      	movlt	r0, r3
 80027ee:	e7a3      	b.n	8002738 <_printf_i+0x130>
 80027f0:	2301      	movs	r3, #1
 80027f2:	464a      	mov	r2, r9
 80027f4:	4639      	mov	r1, r7
 80027f6:	4630      	mov	r0, r6
 80027f8:	47c0      	blx	r8
 80027fa:	3001      	adds	r0, #1
 80027fc:	d09a      	beq.n	8002734 <_printf_i+0x12c>
 80027fe:	3501      	adds	r5, #1
 8002800:	68e3      	ldr	r3, [r4, #12]
 8002802:	9a03      	ldr	r2, [sp, #12]
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	42ab      	cmp	r3, r5
 8002808:	dcf2      	bgt.n	80027f0 <_printf_i+0x1e8>
 800280a:	e7eb      	b.n	80027e4 <_printf_i+0x1dc>
 800280c:	2500      	movs	r5, #0
 800280e:	f104 0919 	add.w	r9, r4, #25
 8002812:	e7f5      	b.n	8002800 <_printf_i+0x1f8>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ac      	bne.n	8002772 <_printf_i+0x16a>
 8002818:	7803      	ldrb	r3, [r0, #0]
 800281a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800281e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002822:	e76c      	b.n	80026fe <_printf_i+0xf6>
 8002824:	08002a91 	.word	0x08002a91
 8002828:	08002aa2 	.word	0x08002aa2

0800282c <memcpy>:
 800282c:	b510      	push	{r4, lr}
 800282e:	1e43      	subs	r3, r0, #1
 8002830:	440a      	add	r2, r1
 8002832:	4291      	cmp	r1, r2
 8002834:	d100      	bne.n	8002838 <memcpy+0xc>
 8002836:	bd10      	pop	{r4, pc}
 8002838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800283c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002840:	e7f7      	b.n	8002832 <memcpy+0x6>

08002842 <memmove>:
 8002842:	4288      	cmp	r0, r1
 8002844:	b510      	push	{r4, lr}
 8002846:	eb01 0302 	add.w	r3, r1, r2
 800284a:	d807      	bhi.n	800285c <memmove+0x1a>
 800284c:	1e42      	subs	r2, r0, #1
 800284e:	4299      	cmp	r1, r3
 8002850:	d00a      	beq.n	8002868 <memmove+0x26>
 8002852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002856:	f802 4f01 	strb.w	r4, [r2, #1]!
 800285a:	e7f8      	b.n	800284e <memmove+0xc>
 800285c:	4283      	cmp	r3, r0
 800285e:	d9f5      	bls.n	800284c <memmove+0xa>
 8002860:	1881      	adds	r1, r0, r2
 8002862:	1ad2      	subs	r2, r2, r3
 8002864:	42d3      	cmn	r3, r2
 8002866:	d100      	bne.n	800286a <memmove+0x28>
 8002868:	bd10      	pop	{r4, pc}
 800286a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800286e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002872:	e7f7      	b.n	8002864 <memmove+0x22>

08002874 <_free_r>:
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	4605      	mov	r5, r0
 8002878:	2900      	cmp	r1, #0
 800287a:	d045      	beq.n	8002908 <_free_r+0x94>
 800287c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002880:	1f0c      	subs	r4, r1, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	bfb8      	it	lt
 8002886:	18e4      	addlt	r4, r4, r3
 8002888:	f000 f8d2 	bl	8002a30 <__malloc_lock>
 800288c:	4a1f      	ldr	r2, [pc, #124]	; (800290c <_free_r+0x98>)
 800288e:	6813      	ldr	r3, [r2, #0]
 8002890:	4610      	mov	r0, r2
 8002892:	b933      	cbnz	r3, 80028a2 <_free_r+0x2e>
 8002894:	6063      	str	r3, [r4, #4]
 8002896:	6014      	str	r4, [r2, #0]
 8002898:	4628      	mov	r0, r5
 800289a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800289e:	f000 b8c8 	b.w	8002a32 <__malloc_unlock>
 80028a2:	42a3      	cmp	r3, r4
 80028a4:	d90c      	bls.n	80028c0 <_free_r+0x4c>
 80028a6:	6821      	ldr	r1, [r4, #0]
 80028a8:	1862      	adds	r2, r4, r1
 80028aa:	4293      	cmp	r3, r2
 80028ac:	bf04      	itt	eq
 80028ae:	681a      	ldreq	r2, [r3, #0]
 80028b0:	685b      	ldreq	r3, [r3, #4]
 80028b2:	6063      	str	r3, [r4, #4]
 80028b4:	bf04      	itt	eq
 80028b6:	1852      	addeq	r2, r2, r1
 80028b8:	6022      	streq	r2, [r4, #0]
 80028ba:	6004      	str	r4, [r0, #0]
 80028bc:	e7ec      	b.n	8002898 <_free_r+0x24>
 80028be:	4613      	mov	r3, r2
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	b10a      	cbz	r2, 80028c8 <_free_r+0x54>
 80028c4:	42a2      	cmp	r2, r4
 80028c6:	d9fa      	bls.n	80028be <_free_r+0x4a>
 80028c8:	6819      	ldr	r1, [r3, #0]
 80028ca:	1858      	adds	r0, r3, r1
 80028cc:	42a0      	cmp	r0, r4
 80028ce:	d10b      	bne.n	80028e8 <_free_r+0x74>
 80028d0:	6820      	ldr	r0, [r4, #0]
 80028d2:	4401      	add	r1, r0
 80028d4:	1858      	adds	r0, r3, r1
 80028d6:	4282      	cmp	r2, r0
 80028d8:	6019      	str	r1, [r3, #0]
 80028da:	d1dd      	bne.n	8002898 <_free_r+0x24>
 80028dc:	6810      	ldr	r0, [r2, #0]
 80028de:	6852      	ldr	r2, [r2, #4]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	4401      	add	r1, r0
 80028e4:	6019      	str	r1, [r3, #0]
 80028e6:	e7d7      	b.n	8002898 <_free_r+0x24>
 80028e8:	d902      	bls.n	80028f0 <_free_r+0x7c>
 80028ea:	230c      	movs	r3, #12
 80028ec:	602b      	str	r3, [r5, #0]
 80028ee:	e7d3      	b.n	8002898 <_free_r+0x24>
 80028f0:	6820      	ldr	r0, [r4, #0]
 80028f2:	1821      	adds	r1, r4, r0
 80028f4:	428a      	cmp	r2, r1
 80028f6:	bf04      	itt	eq
 80028f8:	6811      	ldreq	r1, [r2, #0]
 80028fa:	6852      	ldreq	r2, [r2, #4]
 80028fc:	6062      	str	r2, [r4, #4]
 80028fe:	bf04      	itt	eq
 8002900:	1809      	addeq	r1, r1, r0
 8002902:	6021      	streq	r1, [r4, #0]
 8002904:	605c      	str	r4, [r3, #4]
 8002906:	e7c7      	b.n	8002898 <_free_r+0x24>
 8002908:	bd38      	pop	{r3, r4, r5, pc}
 800290a:	bf00      	nop
 800290c:	20000098 	.word	0x20000098

08002910 <_malloc_r>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	1ccd      	adds	r5, r1, #3
 8002914:	f025 0503 	bic.w	r5, r5, #3
 8002918:	3508      	adds	r5, #8
 800291a:	2d0c      	cmp	r5, #12
 800291c:	bf38      	it	cc
 800291e:	250c      	movcc	r5, #12
 8002920:	2d00      	cmp	r5, #0
 8002922:	4606      	mov	r6, r0
 8002924:	db01      	blt.n	800292a <_malloc_r+0x1a>
 8002926:	42a9      	cmp	r1, r5
 8002928:	d903      	bls.n	8002932 <_malloc_r+0x22>
 800292a:	230c      	movs	r3, #12
 800292c:	6033      	str	r3, [r6, #0]
 800292e:	2000      	movs	r0, #0
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	f000 f87d 	bl	8002a30 <__malloc_lock>
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <_malloc_r+0xac>)
 8002938:	6814      	ldr	r4, [r2, #0]
 800293a:	4621      	mov	r1, r4
 800293c:	b991      	cbnz	r1, 8002964 <_malloc_r+0x54>
 800293e:	4c20      	ldr	r4, [pc, #128]	; (80029c0 <_malloc_r+0xb0>)
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	b91b      	cbnz	r3, 800294c <_malloc_r+0x3c>
 8002944:	4630      	mov	r0, r6
 8002946:	f000 f863 	bl	8002a10 <_sbrk_r>
 800294a:	6020      	str	r0, [r4, #0]
 800294c:	4629      	mov	r1, r5
 800294e:	4630      	mov	r0, r6
 8002950:	f000 f85e 	bl	8002a10 <_sbrk_r>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d124      	bne.n	80029a2 <_malloc_r+0x92>
 8002958:	230c      	movs	r3, #12
 800295a:	6033      	str	r3, [r6, #0]
 800295c:	4630      	mov	r0, r6
 800295e:	f000 f868 	bl	8002a32 <__malloc_unlock>
 8002962:	e7e4      	b.n	800292e <_malloc_r+0x1e>
 8002964:	680b      	ldr	r3, [r1, #0]
 8002966:	1b5b      	subs	r3, r3, r5
 8002968:	d418      	bmi.n	800299c <_malloc_r+0x8c>
 800296a:	2b0b      	cmp	r3, #11
 800296c:	d90f      	bls.n	800298e <_malloc_r+0x7e>
 800296e:	600b      	str	r3, [r1, #0]
 8002970:	50cd      	str	r5, [r1, r3]
 8002972:	18cc      	adds	r4, r1, r3
 8002974:	4630      	mov	r0, r6
 8002976:	f000 f85c 	bl	8002a32 <__malloc_unlock>
 800297a:	f104 000b 	add.w	r0, r4, #11
 800297e:	1d23      	adds	r3, r4, #4
 8002980:	f020 0007 	bic.w	r0, r0, #7
 8002984:	1ac3      	subs	r3, r0, r3
 8002986:	d0d3      	beq.n	8002930 <_malloc_r+0x20>
 8002988:	425a      	negs	r2, r3
 800298a:	50e2      	str	r2, [r4, r3]
 800298c:	e7d0      	b.n	8002930 <_malloc_r+0x20>
 800298e:	428c      	cmp	r4, r1
 8002990:	684b      	ldr	r3, [r1, #4]
 8002992:	bf16      	itet	ne
 8002994:	6063      	strne	r3, [r4, #4]
 8002996:	6013      	streq	r3, [r2, #0]
 8002998:	460c      	movne	r4, r1
 800299a:	e7eb      	b.n	8002974 <_malloc_r+0x64>
 800299c:	460c      	mov	r4, r1
 800299e:	6849      	ldr	r1, [r1, #4]
 80029a0:	e7cc      	b.n	800293c <_malloc_r+0x2c>
 80029a2:	1cc4      	adds	r4, r0, #3
 80029a4:	f024 0403 	bic.w	r4, r4, #3
 80029a8:	42a0      	cmp	r0, r4
 80029aa:	d005      	beq.n	80029b8 <_malloc_r+0xa8>
 80029ac:	1a21      	subs	r1, r4, r0
 80029ae:	4630      	mov	r0, r6
 80029b0:	f000 f82e 	bl	8002a10 <_sbrk_r>
 80029b4:	3001      	adds	r0, #1
 80029b6:	d0cf      	beq.n	8002958 <_malloc_r+0x48>
 80029b8:	6025      	str	r5, [r4, #0]
 80029ba:	e7db      	b.n	8002974 <_malloc_r+0x64>
 80029bc:	20000098 	.word	0x20000098
 80029c0:	2000009c 	.word	0x2000009c

080029c4 <_realloc_r>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	4607      	mov	r7, r0
 80029c8:	4614      	mov	r4, r2
 80029ca:	460e      	mov	r6, r1
 80029cc:	b921      	cbnz	r1, 80029d8 <_realloc_r+0x14>
 80029ce:	4611      	mov	r1, r2
 80029d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80029d4:	f7ff bf9c 	b.w	8002910 <_malloc_r>
 80029d8:	b922      	cbnz	r2, 80029e4 <_realloc_r+0x20>
 80029da:	f7ff ff4b 	bl	8002874 <_free_r>
 80029de:	4625      	mov	r5, r4
 80029e0:	4628      	mov	r0, r5
 80029e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e4:	f000 f826 	bl	8002a34 <_malloc_usable_size_r>
 80029e8:	42a0      	cmp	r0, r4
 80029ea:	d20f      	bcs.n	8002a0c <_realloc_r+0x48>
 80029ec:	4621      	mov	r1, r4
 80029ee:	4638      	mov	r0, r7
 80029f0:	f7ff ff8e 	bl	8002910 <_malloc_r>
 80029f4:	4605      	mov	r5, r0
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d0f2      	beq.n	80029e0 <_realloc_r+0x1c>
 80029fa:	4631      	mov	r1, r6
 80029fc:	4622      	mov	r2, r4
 80029fe:	f7ff ff15 	bl	800282c <memcpy>
 8002a02:	4631      	mov	r1, r6
 8002a04:	4638      	mov	r0, r7
 8002a06:	f7ff ff35 	bl	8002874 <_free_r>
 8002a0a:	e7e9      	b.n	80029e0 <_realloc_r+0x1c>
 8002a0c:	4635      	mov	r5, r6
 8002a0e:	e7e7      	b.n	80029e0 <_realloc_r+0x1c>

08002a10 <_sbrk_r>:
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	4c06      	ldr	r4, [pc, #24]	; (8002a2c <_sbrk_r+0x1c>)
 8002a14:	2300      	movs	r3, #0
 8002a16:	4605      	mov	r5, r0
 8002a18:	4608      	mov	r0, r1
 8002a1a:	6023      	str	r3, [r4, #0]
 8002a1c:	f7ff fb4e 	bl	80020bc <_sbrk>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_sbrk_r+0x1a>
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_sbrk_r+0x1a>
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	20000138 	.word	0x20000138

08002a30 <__malloc_lock>:
 8002a30:	4770      	bx	lr

08002a32 <__malloc_unlock>:
 8002a32:	4770      	bx	lr

08002a34 <_malloc_usable_size_r>:
 8002a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a38:	1f18      	subs	r0, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bfbc      	itt	lt
 8002a3e:	580b      	ldrlt	r3, [r1, r0]
 8002a40:	18c0      	addlt	r0, r0, r3
 8002a42:	4770      	bx	lr

08002a44 <_init>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	bf00      	nop
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr

08002a50 <_fini>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	bf00      	nop
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr
